buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)
ext.priv = parseConfig(file('private.properties'))

version = "${config.version}-${config.build_number}"
group = "juliminecraft.dispenserplanting" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

minecraft {
    version = "${config.mc_version}-${config.forge_version}"

    mappings = config.mc_mappings
    //This, does the token replacement.
    //Though, I reccomend this to be replaced with a token such as @VERSION@
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version
}


dependencies {
    compile files("dependency/harvestcraft-1.12a.jar")
    compile files("dependency/ImmersiveEngineering.jar")    
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import java.util.regex.Pattern

def parseConfig(File config) {
	if(config.exists()){
		config.withReader {
			def prop = new Properties()
			prop.load(it)
			return (new ConfigSlurper().parse(prop))
		}
	} else {
		return null
	}
}

defaultTasks 'clean', 'build'
